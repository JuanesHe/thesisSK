%% Juan Heredia
%% Skoltech 2020
%% File used to calculate the Kinematics and Jacobian
%% UR3

clc
clear all
close all

syms q1 q2 q3 q4 q5 q6

l1 = 0.1519;
l2 = 0.24365;
l3 = 0.21325;
l4 = 0.11235;
l5 = 0.08535;
l6 = 0.0819;

%% Art 1
teta=q1;
d=l1;
alfa=90;
a=0;
A01 =[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];

%% Art 2
teta=q2;
d=0;
alfa=0;
a=-l2;
A12=[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];

%% Art 3
teta=q3;
d=0;
alfa=0;
a=-l3;
A23=[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];
 
 %% Art 4
teta=q4;
d=l4;
alfa=90;
a=0;
A34=[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];

%% Art 5
teta=q5;
d=l5;
alfa=-90;
a=0;
A45=[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];
 
 
%% Art  6
teta=q6;
d=l6;
alfa=0;
a=0;
A56=[[ cos(teta) -cosd(alfa)*sin(teta)  sind(alfa)*sin(teta) a*cos(teta)];...
     [ sin(teta)  cosd(alfa)*cos(teta) -sind(alfa)*cos(teta) a*sin(teta)];...
     [          0             sind(alfa)             cosd(alfa)            d];...
     [          0                      0                     0,           1]];


 
%% Homogeneous Matrix
T=A01*A12*A23*A34*A45*A56;
h=T(1:1:3,4);


%%
q1 = 0;
q2 = 0;
q3 = 0;
q4 = 0;
q5 = 0;
q6 = 0;

eval(h)

%% Jacobian
syms q1 q2 q3 q4 q5 q6 

xe=T(1,4);
ye=T(2,4);
ze=T(3,4);
he=[xe ye ze];
qe=[q1 q2 q3 q4 q5 q6]; 
for i=1:3
    for j=1:6
        JA(i,j)=diff(he(i),qe(j));
    end
end

%% Comprove the model with the simulation 


q = [0,0,-pi/2,0,0,0];

q1 = q(1);
q2 = q(2);
q3 = q(3);
q4 = q(4); 
q5 = q(5);
q6 = q(6);

eval(h)


%% Rotational

R= T(1:1:3,1:1:3);

syms dq1 dq2 dq3 dq4 dq5 dq6
syms q1 q2 q3 q4 q5 q6
qe=[q1 q2 q3 q4 q5 q6]; 
dq = [dq1 dq2 dq3 dq4 dq5 dq6]; 
dR = zeros(3,3);
for j=1:6
    dR = dR + diff(R,qe(j)).*dq(j);
end


W = simplify(expand(simplify(dR*R.')));
wx = W(3,2);
wy = W(1,3);
wz = W(2,1);

syms dq1 dq2 dq3 dq4 dq5 dq6

dq1 = 1;
dq2 = 0;
dq3 = 0;
dq4 = 0;
dq5 = 0;
dq6 = 0;

wx1 = eval(wx);
wy1 = eval(wy);
wz1 = eval(wz);

%% Save the Jacobian, matrix and end efector position


save('KinematicsUR.mat','JA','T','h')

